---
import Layout from "../layouts/Layout.astro";
import TestSvelte from "../components/TestSvelte.svelte";
---

<Layout title="Movie">
  <a href={import.meta.env.BASE_URL}>Back</a>
  <div id="videoList"></div>
  <TestSvelte client:only />
</Layout>

<script>
  const urlParams = new URLSearchParams(window.location.search);
  const myParam = urlParams.get("movieId");
  const imgPosterUrl = "http://image.tmdb.org/t/p/";
  const imgPosterSize = "w342/";
  // const imgBackgroundSize = "w1280/";

  getJsonAPI(myParam).catch((error) => console.error(error));
  function displayVideos(data, videos) {
    let outputHtml = "";

    outputHtml += `<h1>${data.title}</h1>`;
    outputHtml += `<p>${data.overview}</p>`;
    outputHtml += `<p><img src="${imgPosterUrl + imgPosterSize + data.poster_path}" alt="${data.title + "Poster"}" /></p>`;
    outputHtml += `<p>Release Date: ${new Date(Date.parse(data.release_date)).toLocaleDateString()}</p>`;
    // outputHtml += `<li><img src="${imgPosterUrl + imgBackgroundSize + data.backdrop_path}" alt="${data.title + "Poster"}" /></li>`;

    outputHtml += "<h2>Trailers</h2>";
    outputHtml += '<section class="video-scroll">';
    outputHtml += '<ul class="video-scroll">';
    videos.results
      .filter((element) => {
        return element.official === true && element.type === "Trailer";
      })
      .forEach((element) => {
        outputHtml += `<li><iframe
      id="ytplayer"
      type="text/html"
      loading="lazy"
      width="480"
      height="270"
      title="${element.name}"
      src="https://www.youtube.com/embed/${element.key}"
      frameborder="0"
      allowfullscreen
    ></iframe></li>`;
      });

    outputHtml += `</ul>`;

    return outputHtml;
  }

  const videoList = document.querySelector("#videoList");

  async function getJsonAPI(movieId) {
    const token = import.meta.env.PUBLIC_API_ACCESS_TOKEN;
    const options = {
      method: "GET",
      headers: {
        accept: "application/json",
        Authorization: token,
      },
    };

    const response = await fetch(
      `${import.meta.env.PUBLIC_API_URL}movie/${movieId}`,
      options
    );

    if (!response.ok) {
      throw new Error(`HTTPerror:${response.status}`);
    }

    const videoResponse = await fetch(
      `${import.meta.env.PUBLIC_API_URL}movie/${movieId}/videos?language=en-US`,
      options
    );

    if (!videoResponse.ok) {
      throw new Error(`HTTPerror:${response.status}`);
    }

    const data = await response.json();
    const videos = await videoResponse.json();
    videoList.innerHTML = displayVideos(data, videos);
  }
</script>
